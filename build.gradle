import com.jfrog.bintray.gradle.tasks.BintrayUploadTask
import org.gradle.api.publish.maven.internal.artifact.FileBasedMavenArtifact

ext {
    bintrayRepo = "chrynan"
    libraryGroup = "com.chrynan.inject"
    libraryOwner = "chrynan"
    libraryRepo = "inject"
    libraryVersion = "0.5.0"
    libraryVersionCode = 3
    libraryVersionDescription = "Minor Release"
    libraryGithubUrl = "https://github.com/chRyNaN/inject.git"
    libraryLicense = "Apache-2.0"
}

group libraryGroup
version libraryVersion

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        google()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.4.0"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4"
    }
}

allprojects {
    repositories {
        jcenter()
    }
}

configurations {
    compileClasspath
}

subprojects {
    apply plugin: "maven-publish"
    apply plugin: "com.jfrog.bintray"

    bintray {
        user = project.findProperty("BINTRAY_USER") ?: System.getenv("BINTRAY_USER")
        key = project.findProperty("BINTRAY_KEY") ?: System.getenv("BINTRAY_KEY")
        pkg {
            repo = rootProject.bintrayRepo
            name = rootProject.libraryRepo
            licenses = [rootProject.libraryLicense]
            vcsUrl = rootProject.libraryGithubUrl
            version {
                name = rootProject.libraryVersion
                desc = rootProject.libraryVersionDescription
                released = new Date()
                vcsTag = rootProject.libraryVersion
            }
        }
    }

    bintrayUpload.doFirst {
        publications = publishing.publications.collect {
            it.name
        }
    }

    bintrayUpload.dependsOn publishToMavenLocal

    tasks.withType(BintrayUploadTask) {
        doFirst {
            publishing.publications.withType(MavenPublication).forEach({ publication ->
                File moduleFile = new File(project.buildDir, "publications/${publication.name}/module.json")
                if (moduleFile.exists()) {
                    publication.artifact(new FileBasedMavenArtifact(moduleFile) {
                        protected String getDefaultExtension() {
                            return "module"
                        }
                    })
                }
            })
        }
    }
}
